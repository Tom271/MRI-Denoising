%% Train DnCNN
% Model Parameters
patchSize = 64;
depth = 17;
channels = 1;
channelFormat = 'Grayscale';

% Dataset Parameters
validateImage = 'testing_set\testingset_true\file1000000_15.png';
trainDataPath = 'training_set\trainingset_true';
noiseStd = 0.07; % sigma
% If the network outputs zero matrix,
% then the loss is approximatly 0.5*channels*(patchSize*noiseStd)^2
patchesPerImage = 30;

% Training Parameters
initialLearnRate = 3e-4;
learnRateSchedule = 'piecewise';
learnRateDropFactor = 0.5;
learnRateDropPeriod = 3;
batchSize = 64;
epochs = 15;
shuffle = 'every-epoch';
checkpointPath = 'CheckPoints';
validationFrequency = 6000;

% Output path
outputPath = ['fulltrain_dncnn_' num2str(floor(noiseStd*255)) '_' datestr(datetime('now'), 'mm_dd__HH_MM') '.mat'];

rng(2020) % Reproducibility




%% Define Net
net = model(patchSize, channels, depth);

%% Prepare Image Datastore
imds = imageDatastore(trainDataPath, 'IncludeSubfolder', true,'LabelSource', 'foldernames');
fileN = numel(imds.Files);

[imdsTrain, imdsVal, imdsTest] = splitEachLabel(imds, 0.95, 0.04, 0.01);

imdsTrain = denoisingImageDatastore(imdsTrain, ...
    'patchSize', patchSize,...
    'PatchesPerImage', patchesPerImage, ...
    'GaussianNoiseLevel' , noiseStd);
imdsVal = denoisingImageDatastore(imdsVal, ...
    'patchSize', patchSize,...
    'PatchesPerImage', patchesPerImage, ...
    'GaussianNoiseLevel' , noiseStd);

%% Training Options
% 
options = trainingOptions('adam', ...
    'InitialLearnRate', initialLearnRate, ...
    'SquaredGradientDecayFactor',0.99, ...
    'LearnRateSchedule', learnRateSchedule, ...
    'LearnRateDropFactor', learnRateDropFactor, ...
    'LearnRateDropPeriod', learnRateDropPeriod, ...
    'MaxEpochs',epochs, ...
    'MiniBatchSize',batchSize, ...
    'Plots','training-progress', ...
    'Verbose', 1, ...
    'VerboseFrequency', floor(fileN*patchesPerImage/batchSize), ...
    'ValidationData', imdsVal, ...
    'ValidationFrequency', validationFrequency, ...
    'ValidationPatience', Inf, ...
    'ExecutionEnvironment', 'parallel');

trainedNet = trainNetwork(imdsTrain, net, options);
% 
% %% Save Trained Network
% save(outputPath, 'trainedNet')

function layers = model(patchSize, channels, networkDepth)
    layers = [];
    min_scale = 0.025;

    % Input
    input = imageInputLayer([patchSize patchSize channels], ...
        'Normalization', 'none', ...
        'Name', 'Input');

    layers = [layers, input];
    
    % Conv+ReLU
    convolution = convolution2dLayer(3, 64, ...
        'Stride', 1, ...
        'Padding', 'same', ...
        'WeightLearnRateFactor', 1, ...
        'WeightL2Factor', 1, ...
        'BiasLearnRateFactor', 1, ...
        'BiasL2Factor', 0, ...
        'Name', 'Convolution1');
    convolution.Weights = sqrt(2/(9*64))*randn(3,3,channels,64,'single');
    convolution.Bias = zeros(1,1,64,'single');

    relu = reluLayer(...
        'Name', 'ReLU1');

    layers = [layers, convolution, relu];
    
    % Conv+BN+ReLU
    for i = 2:networkDepth-1
        convolution = convolution2dLayer(3, 64, ...
            'Stride', 1, ...
            'Padding', 'same', ...
            'WeightLearnRateFactor', 1, ...
            'WeightL2Factor', 1, ...
            'BiasLearnRateFactor', 1, ...
            'BiasL2Factor', 0, ...
            'Name', ['Convolution', num2str(i)]);
        convolution.Weights = sqrt(2/(9*64))*randn(3,3,64,64,'single');
        convolution.Bias = zeros(1,1,64,'single');

        batchnorm = batchNormalizationLayer(...
            'Scale', clipping(sqrt(2/(9*64))*randn(1,1,64,'single'), min_scale), ...
            'ScaleLearnRateFactor', 1, ...
            'ScaleL2Factor', 0, ...
            'Offset', zeros(1,1,64,'single'), ...
            'OffsetLearnRateFactor', 1, ...
            'OffsetL2Factor', 0, ...
            'Name', ['BatchNorm', num2str(i)]);

        relu = reluLayer(...
            'Name', ['ReLU', num2str(i)]);

        layers = [layers, convolution, batchnorm, relu]; 
    end
    
    % Conv
    convolution = convolution2dLayer(3, channels, ...
        'Stride', 1, ...
        'Padding', 'same', ...
        'WeightLearnRateFactor', 1, ...
        'WeightL2Factor', 1, ...
        'BiasLearnRateFactor', 1, ...
        'BiasL2Factor', 0, ...
        'Name', ['Convolution', num2str(networkDepth)]);
    convolution.Weights = sqrt(2/(9*64))*randn(3,3,64,channels,'single');
    convolution.Bias = zeros(1,1,channels,'single');

    layers = [layers, convolution];
    
    % Regression
    regression = regressionLayer(...
        'Name', 'Output');

    layers = [layers, regression];
end

function A = clipping(A, b)
    A(A>=0 & A<b) = b;
    A(A<0 & A>-b) = -b;
end
    

